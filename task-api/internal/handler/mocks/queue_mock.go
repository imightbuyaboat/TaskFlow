// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/queue/queue.go
//
// Generated by this command:
//
//	mockgen -source=pkg/queue/queue.go -destination=task-api/internal/handler/mocks/queue_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	task "github.com/imightbuyaboat/TaskFlow/pkg/task"
	gomock "go.uber.org/mock/gomock"
)

// MockQueue is a mock of Queue interface.
type MockQueue struct {
	ctrl     *gomock.Controller
	recorder *MockQueueMockRecorder
	isgomock struct{}
}

// MockQueueMockRecorder is the mock recorder for MockQueue.
type MockQueueMockRecorder struct {
	mock *MockQueue
}

// NewMockQueue creates a new mock instance.
func NewMockQueue(ctrl *gomock.Controller) *MockQueue {
	mock := &MockQueue{ctrl: ctrl}
	mock.recorder = &MockQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueue) EXPECT() *MockQueueMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockQueue) Publish(t *task.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockQueueMockRecorder) Publish(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockQueue)(nil).Publish), t)
}
